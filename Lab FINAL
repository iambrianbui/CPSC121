/*
CPSC121 Lab FINAL
Created by:  Brian Bui
Created on:  11 May 2016
Last edited:  11 May 2016

Usually, I spend about four hours or more on labs, the two hour constraint was quite stressful.  I'm sure that this could
have done a lot more efficiently.  However, what is done, is done.  

*/

#include "TicTacToe.h"
#include<iostream>

int TicTacToe::checkWin()  //  check if a player has won
{
	int row, col, r, c, d, ro, co, d0, fvalue;  // x is for player one, xo is for player two
	//  r = row, c = column, d = diagonal
	for (row = 0; row < 3; row++)  //  row and col are for the forloop
	{
		r = 0;  //  initialize
		c = 0;
		d = 0;
		ro = 0;
		co = 0;
		d0 = 0;
		for (col = 0; col  <3; col++)  //  check if a certain spot has 1 or 2 in it, then increase the score
		{
			if (board[row][col] == 1)
				r++;
			if (board[row][col] == 2)
				ro++;

			if (board[col][row] == 1)
				c++;
			if (board[col][row] == 2)
				co++;

			if (board[col][col] == 1)
				d++;
			if (board[col][col] == 2)
				d0++;

			if (r == 3 || c == 3 || d == 3)  //  if the score for either player is 3, then the game is over
				return 1;
			if (ro == 3 || co == 3 || d0 == 3)
				return 2;
		}
	}
	if (board[0][2] == 1 && board[1][1] == 1 && board[2][0] == 1)
		return 1;
	if (board[0][2] == 2 && board[1][1] == 2 && board[2][0] == 2)
		return 2;
	fvalue = r + c + d + ro + co + d0;  //  add up all the values
	if (fvalue == 9)  // if all spots are filled it's a tie!
		return 3;
	else  //  if there is no yield. keep playing
		return 0;
} 

TicTacToe::TicTacToe()  // constructor function, clear the board and have player 1 go first
{
	nextPlayer = 1;
	for (int i = 0; i < 3; i++)  //  basic for loop with initialization
	{
		for (int j = 0; j < 3; j++)
		{
			board[i][j] = 0;
		}
	}
}

void TicTacToe::displayBoard()  //  display the board, simple for loop in a 2d array
{
	for (int i = 0; i < 3; i++)
	{
		for (int j = 0; j < 3; j++)
		{
			std::cout << board[i][j];  //  ALL GROWN UP, NOT USING NAMESPACE STD NO MO'
		}
		std::cout << std::endl;
	}
}

int TicTacToe::makeMove(int position)  //  the deep stuff, allows players to make a move and see if a spot on the board
//  is occupied.
{
	const int min = 0, max = 8;  //  set the parameters
	if (position <= max && position >= min)  //  check if the user is entering a value within a parameter
	{
		if (position == 0)  //  if the player gives us position 0
		{
			if (board[0][0] == 0)  //  check if position 0 is filled
			{
				board[0][0] = nextPlayer;  //  fill in position 0 if it is not filled
				if (nextPlayer == 2)  //  change the player
				{
					nextPlayer = 1;
				}
				else if (nextPlayer == 1)
				{
					nextPlayer = 2;
				}
				checkWin();  //  check if someone has won
			}
			else
				return -1;  //  if the position is filled, reject the player
		}
		else if (position == 1)  //  check if the position 1 is filled, repeat above
		{
			if (board[0][1] == 0)
			{
				board[0][1] = nextPlayer;
				if (nextPlayer == 2)
				{
					nextPlayer = 1;
				}
				else if (nextPlayer == 1)
				{
					nextPlayer = 2;
				}
				checkWin();
			}
			else
				return -1;
		}
		else if (position == 2)  //  check if the position 2 is filled, repeat above
		{
			if (board[0][2] == 0)
			{
				board[0][2] = nextPlayer;
				if (nextPlayer == 2)
				{
					nextPlayer = 1;
				}
				else if (nextPlayer == 1)
				{
					nextPlayer = 2;
				}
				checkWin();
			}
			else
				return -1;
		}
		else if (position == 3)  //  check if the position 3 if filled, repeat above
		{
			if (board[1][0] == 0)
			{
				board[1][0] = nextPlayer;
				if (nextPlayer == 2)
				{
					nextPlayer = 1;
				}
				else if (nextPlayer == 1)
				{
					nextPlayer = 2;
				}
				checkWin();
			}
			else
				return -1;
		}
		else if (position == 4)  //  and so on and so forth
		{
			if (board[1][1] == 0)
			{
				board[1][1] = nextPlayer;
				if (nextPlayer == 2)
				{
					nextPlayer = 1;
				}
				else if (nextPlayer == 1)
				{
					nextPlayer = 2;
				}
				checkWin();
			}
		}
		else if (position == 5)  //  this was a mind-boggling lab
		{
			if (board[1][2] == 0)
			{
				board[1][2] = nextPlayer;
				if (nextPlayer == 2)
				{
					nextPlayer = 1;
				}
				else if (nextPlayer == 1)
				{
					nextPlayer = 2;
				}
				checkWin();
			}
			else
				return -1;
		}
		else if (position == 6)  //  but it was very fun
		{
			if (board[2][0] == 0)
			{
				board[2][0] = nextPlayer;
				if (nextPlayer == 2)
				{
					nextPlayer = 1;
				}
				else if (nextPlayer == 1)
				{
					nextPlayer = 2;
				}
				checkWin();
			}
			else
				return -1;
		}
		else if (position == 7)  //  all this work through out the semester
		{
			if (board[2][1] == 0)
			{
				board[2][1] = nextPlayer;
				if (nextPlayer == 2)
				{
					nextPlayer = 1;
				}
				else if (nextPlayer == 1)
				{
					nextPlayer = 2;
				}
				checkWin();
			}
		}
		else if (position == 8)  //  just to make tic tac toe
		{
			if (board[2][2] == 0)
			{
				board[2][2] = nextPlayer;
				if (nextPlayer == 2)
				{

					nextPlayer = 1;
				}
				else if (nextPlayer == 1)
				{
					nextPlayer = 2;
				}
				checkWin();
			}
			else  //  it just shows how much more there is to learn
				return -1;  
		}

	}
	else
		return -1;  //  reject the player if the value is not within the parameters
		//  see you at the lecture final, professor!

}
