/*
Lab 6
Created by:  Brian Bui
Created on:  16 March 2016
Last edited: 22 March 2016
*/

#include<iostream>
#include<ctime>  //  reset seed
#include <cstdlib>  //  srand, rand
#include<string>
#include<stdio.h>

using namespace std;

void getChoice(int &x);  //  call on the getChoice function
void fillArray(int []);  //  call on the fillArray function
void displayArray(int []);  //  call on the displayArray function
void shuffle(int []);  //  call on the shuffle function
void bubbleSort(int [], int x);  //  call on the bubbleSort function
void selectionSort(int [], int x);  //  call on the selectionSort function

const int min = 1, max = 6;
const int SIZE = 10;

int main()
{

{
	int choice;  //  decisions, decisions
	char yes;  //  check if the user knows what he/she is doing

	int intArray[SIZE];

	bool ifArray = 0;

	string lines = "====================";

	do // loop
	{
		cout << "Welcome to the Array Manager." << endl;  //  the menu
		cout << lines << lines << endl;
		cout << "1..........Fill the array." <<
			endl << "2..........Display the array." <<
			endl << "3..........Shuffle the array randomly." <<
			endl << "4..........Sort array using Bubble Sort." <<
			endl << "5..........Sort array using Selection Sort." <<
			endl << "6..........Exit the program." << endl;
		cin >> choice;
		getChoice(choice);

		if (choice == 1)
		{
			fillArray(intArray);  //  call on the fillArray function
			ifArray = 1;  //  yes, there is an array now
		}
		if (choice == 2)
		{
			if (ifArray == 0)
			{
				cout << "There are currently no user defined arrays, proceed anyway?" << endl << "Press 'Y' to continue.  " << endl;  //  check if the user wants to view an array of nothing 
				cin >> yes;  
				if (yes == 'Y' || yes == 'y')  //  case insensitive
				{
					displayArray(intArray);  //  call on the function anyway
				}
			}
			else
			{
				displayArray(intArray);  //  call on the displayArray function
			}
		}
		if (choice == 3)
		{
			shuffle(intArray);  //  call on the shuffle function
		}
		if (choice == 4)
		{
			bubbleSort(intArray, SIZE);  //  call on the bubbleSort function
		}
		if (choice == 5)
		{
			selectionSort(intArray, SIZE);  //  call tbe selectionSort function
		}
	} while (choice != 6);

	cout << "Goodbye!" << endl;  //  peace out

	system("pause");
	return 0;

	}
}

void getChoice(int&x)   //  make sure the user cannot enter numbers out of the parameters
{
	while (x < min || x > max)
	{
		while (cin.fail())
		{
			cin.clear();
			cin.ignore();
		}
		cout << "Invalid input." << endl;
		cin >> x;
	}
}

void fillArray(int arr[])
{
	cout << "Please enter ten integers for the array." << endl;  // prompt user for 10 integers
	for (int i = 0; i < SIZE; i++)
	{
		cout << "Value " << i + 1 << ":  ";
		cin >> arr[i];
	}
}

void displayArray(int arr[])
{
	for (int i = 0; i < SIZE; i++)
	{
		cout << i + 1 << ".  " << arr[i] << endl;  //  display arr[i], and repeat for each number
	}
}

void shuffle(int arr[])
{


	for (int i = 0; i < (SIZE - 1); i++)
	{
		srand(time(NULL));  //  rng

		int r = i + (rand() % (SIZE - i));  //  int r(andom) = index + random number (size - 1)
		int temp = arr[i];  //  the ol' switcheroo
		arr[i] = arr[r];
		arr[r] = temp;
	}
	cout << string(50, '\n');  //  clear screen
	cin.clear();
	cin.ignore(1000, '\n');
	cout << "Array shuffled." << endl;
}

void bubbleSort(int arr[], int n)

{
	int a, b, c;

	for (a = 0; a < (n - 1); a++)  //  a = starting index, a < SIZE - 1, increase a
	{
		for (b = 0; b < n - a - 1; b++)  //  b = secondary index, if b < size - a - 1, increase b
		{
			if (arr[b] < arr[b + 1])  //  if arr[b] is lessthan arr[b+1]
			{
				c = arr[b];  //  swapping function
				arr[b] = arr[b + 1];
				arr[b + 1] = c;
			}
		}
	}
	cout << string(50, '\n');  //  clear screen
	cin.clear();
	cin.ignore(1000, '\n');
	cout << "Array organized.  " << endl;
}

void selectionSort(int arr[], int n)
{
	for (int i = 0; i < n; i++)  //  i = starting index, i < size, increase i
	{
		int smallest = i;  //  set the smallest number = starting index
		for (int j = i + 1; j < n; j++)  //  j = current index
		{
			if (arr[j] < arr[smallest])  // if the current index is less than the smallest index, then the current index is the new smallest
				smallest = j;
		}
		swap(arr[i], arr[smallest]);  //  swap the current with the smallest
	}
	cout << string(50, '\n');  //  clear screen
	cin.clear();
	cin.ignore(1000, '\n');
	cout << "Array organized.  " << endl;
}
